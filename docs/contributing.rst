Contributing
############

Getting Started for Local Development
-------------------------------------

A Conda environment file is provided that contains all the necessary packages for local development.

.. code-block:: bash

   $ git clone https://github.com/gpauloski/ProxyStore.git
   $ cd ProxyStore
   $ conda env create --file environment.yml
   $ conda activate ProxyStore

The :code:`Makefile` includes all the recipes for continuous integration tests.
We use Black and Flake8 for linting and PyTest with py-cov for unit-testing and coverage.
Each can be run individually or all at once.

.. code-block:: bash

   $ make black
   $ make flake8
   $ make pytest
   $ make test  # runs the three previous

The Python code and docstring format mostly follows the `Google Python Style Guide <https://google.github.io/styleguide/pyguide.html>`_.

Module-level unit-test are located in the :code:`test/` directory in the same directory the module is located in.
E.g. the tests for :code:`proxystore/backend/cache.py` are located in :code:`proxystore/backend/test/test_cache.py`.

If code changes require an update to the documentation (e.g., for function signature changes, new modules, etc.), the documentation can be built as follows.

.. code-block:: bash

   $ cd docs
   $ pip install requirement.txt  # Documentation specific packages
   $ make html

The compiled docs can be opened in a browser with :code:`docs/_build/html/index.html`.
Docstrings for existing modules should be autogenerated.
For new modules, a new :code:`.rst` needs to be created in :code:`docs/source/`, and the reference needs to be added to the correct table of content.

Issues
------

We use GitHub issues to report problems, request and track changes, and discuss future ideas.

If you open an issue for a specific problem, please include the steps to reproduce the issue.

Pull Requests
-------------

We use the standard GitHub contribution cycle.

1. Fork the repository and clone to your local machine

2. Create local changes

   - Changes should conform to the style and testing guidelines, referenced above.

   - Commit messages should start with a sentence describing the changes followed by a blank line then a detailed description of what changed and why.

3. Push commits to your fork

4. Open a pull request in this repository

   - The pull request should include a description of the motivation for the PR and included changes.
